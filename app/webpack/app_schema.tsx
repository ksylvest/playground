import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  /** An ISO 8601-encoded datetime */
  DateTime: string,
  /** Represents untyped JSON */
  JSON: any,
};

/** Autogenerated return type of AttachAvatar */
export type AttachAvatarPayload = {
   __typename?: 'AttachAvatarPayload',
  status: Status,
};

export type Attached = {
   __typename?: 'Attached',
  filename: Scalars['String'],
  id: Scalars['String'],
};

export type Billing = {
   __typename?: 'Billing',
  customer?: Maybe<Billing__Customer>,
};

export enum Billing__Brand {
  AmericanExpress = 'AMERICAN_EXPRESS',
  DinersClub = 'DINERS_CLUB',
  Discover = 'DISCOVER',
  Jcb = 'JCB',
  Mastercard = 'MASTERCARD',
  Unionpay = 'UNIONPAY',
  Unknown = 'UNKNOWN',
  Visa = 'VISA'
}

export enum Billing__Currency {
  Cad = 'CAD',
  Eur = 'EUR',
  Usd = 'USD'
}

export type Billing__Customer = {
   __typename?: 'Billing__Customer',
  currency?: Maybe<Billing__Currency>,
  id: Scalars['ID'],
  sources: Array<Billing__Source>,
};

export type Billing__Source = {
   __typename?: 'Billing__Source',
  brand: Billing__Brand,
  default: Scalars['Boolean'],
  exp: Scalars['String'],
  id: Scalars['ID'],
  number: Scalars['String'],
};

/** Autogenerated return type of BuildBillingSource */
export type BuildBillingSourcePayload = {
   __typename?: 'BuildBillingSourcePayload',
  status: Status,
};

/** Autogenerated return type of BuildFeedComment */
export type BuildFeedCommentPayload = {
   __typename?: 'BuildFeedCommentPayload',
  comment?: Maybe<Feed__Comment>,
  errors?: Maybe<Errors>,
  status: Status,
};

/** Autogenerated return type of ChangePassword */
export type ChangePasswordPayload = {
   __typename?: 'ChangePasswordPayload',
  errors?: Maybe<Errors>,
  status: Status,
};

/** Autogenerated return type of ChangeProfile */
export type ChangeProfilePayload = {
   __typename?: 'ChangeProfilePayload',
  errors?: Maybe<Errors>,
  status: Status,
};


/** Autogenerated return type of DefaultBillingSource */
export type DefaultBillingSourcePayload = {
   __typename?: 'DefaultBillingSourcePayload',
  status: Status,
};

/** Autogenerated return type of DestroyBillingSource */
export type DestroyBillingSourcePayload = {
   __typename?: 'DestroyBillingSourcePayload',
  status: Status,
};

/** Autogenerated return type of DestroyNotification */
export type DestroyNotificationPayload = {
   __typename?: 'DestroyNotificationPayload',
  notification: Notification,
};

/** Autogenerated return type of DestroySession */
export type DestroySessionPayload = {
   __typename?: 'DestroySessionPayload',
  session: Session,
};

/** Autogenerated return type of DetachAvatar */
export type DetachAvatarPayload = {
   __typename?: 'DetachAvatarPayload',
  status: Status,
};

export type Errors = {
   __typename?: 'Errors',
  messages: Scalars['JSON'],
};

export type Feed = {
   __typename?: 'Feed',
  entries: Array<Feed__Entry>,
  entry: Feed__Entry,
};


export type FeedEntryArgs = {
  id: Scalars['ID']
};

export type Feed__Comment = {
   __typename?: 'Feed__Comment',
  id: Scalars['ID'],
  message: Scalars['String'],
  sent: Scalars['DateTime'],
  user: User,
};

export type Feed__CommentInput = {
  entryID: Scalars['ID'],
  message: Scalars['String'],
};

export type Feed__Entry = {
   __typename?: 'Feed__Entry',
  comments: Array<Feed__Comment>,
  id: Scalars['ID'],
  liked: Scalars['Boolean'],
  likes: Scalars['Int'],
  photos: Array<Attached>,
  tags: Array<Scalars['String']>,
  user: User,
};

export type Geography = {
   __typename?: 'Geography',
  city: Scalars['String'],
  continent: Scalars['String'],
  country: Scalars['String'],
  id: Scalars['ID'],
  latitude: Scalars['Float'],
  longitude: Scalars['Float'],
  region: Scalars['String'],
  zip: Scalars['String'],
};


/** Autogenerated return type of LikeFeedEntry */
export type LikeFeedEntryPayload = {
   __typename?: 'LikeFeedEntryPayload',
  entry: Feed__Entry,
};

export type LoginInput = {
  email: Scalars['String'],
  password: Scalars['String'],
};

/** Autogenerated return type of LoginMutation */
export type LoginMutationPayload = {
   __typename?: 'LoginMutationPayload',
  errors?: Maybe<Errors>,
  session?: Maybe<Session>,
  status: Status,
};

/** Autogenerated return type of LogoutMutation */
export type LogoutMutationPayload = {
   __typename?: 'LogoutMutationPayload',
  status: Status,
};

export type Mutation = {
   __typename?: 'Mutation',
  attachAvatar?: Maybe<AttachAvatarPayload>,
  buildBillingSource?: Maybe<BuildBillingSourcePayload>,
  buildFeedComment?: Maybe<BuildFeedCommentPayload>,
  changePassword?: Maybe<ChangePasswordPayload>,
  changeProfile?: Maybe<ChangeProfilePayload>,
  defaultBillingSource?: Maybe<DefaultBillingSourcePayload>,
  destroyBillingSource?: Maybe<DestroyBillingSourcePayload>,
  destroyNotification?: Maybe<DestroyNotificationPayload>,
  destroySession?: Maybe<DestroySessionPayload>,
  detachAvatar?: Maybe<DetachAvatarPayload>,
  likeFeedEntry?: Maybe<LikeFeedEntryPayload>,
  login?: Maybe<LoginMutationPayload>,
  logout?: Maybe<LogoutMutationPayload>,
  readNotification?: Maybe<ReadNotificationPayload>,
  signup?: Maybe<SignupMutationPayload>,
  unlikeFeedEntry?: Maybe<UnlikeFeedEntryPayload>,
};


export type MutationAttachAvatarArgs = {
  id: Scalars['ID']
};


export type MutationBuildBillingSourceArgs = {
  source: Scalars['String']
};


export type MutationBuildFeedCommentArgs = {
  input: Feed__CommentInput
};


export type MutationChangePasswordArgs = {
  input: PasswordInput
};


export type MutationChangeProfileArgs = {
  input: UserInput
};


export type MutationDefaultBillingSourceArgs = {
  id: Scalars['ID']
};


export type MutationDestroyBillingSourceArgs = {
  id: Scalars['ID']
};


export type MutationDestroyNotificationArgs = {
  id: Scalars['ID']
};


export type MutationDestroySessionArgs = {
  id: Scalars['String']
};


export type MutationLikeFeedEntryArgs = {
  id: Scalars['ID']
};


export type MutationLoginArgs = {
  input: LoginInput
};


export type MutationReadNotificationArgs = {
  id: Scalars['ID']
};


export type MutationSignupArgs = {
  input: SignupInput
};


export type MutationUnlikeFeedEntryArgs = {
  id: Scalars['ID']
};

export type Notification = {
   __typename?: 'Notification',
  deleted: Scalars['Boolean'],
  id: Scalars['ID'],
  message: Scalars['String'],
  read: Scalars['Boolean'],
  sent: Scalars['DateTime'],
};

export type PasswordInput = {
  current: Scalars['String'],
  replacement: Scalars['String'],
};

export type Query = {
   __typename?: 'Query',
  billing: Billing,
  feed: Feed,
  notifications: Array<Notification>,
  sessions: Array<Session>,
  user?: Maybe<User>,
};

/** Autogenerated return type of ReadNotification */
export type ReadNotificationPayload = {
   __typename?: 'ReadNotificationPayload',
  notification: Notification,
};

export type Session = {
   __typename?: 'Session',
  deleted: Scalars['Boolean'],
  geography?: Maybe<Geography>,
  id: Scalars['ID'],
  ip: Scalars['String'],
  seen: Scalars['DateTime'],
  status: SessionStatusEnum,
  user: User,
};

export enum SessionStatusEnum {
  Offline = 'OFFLINE',
  Online = 'ONLINE'
}

export type SignupInput = {
  email: Scalars['String'],
  name: Scalars['String'],
  password: Scalars['String'],
};

/** Autogenerated return type of SignupMutation */
export type SignupMutationPayload = {
   __typename?: 'SignupMutationPayload',
  errors?: Maybe<Errors>,
  session?: Maybe<Session>,
  status: Status,
};

export enum Status {
  Ok = 'OK',
  Unprocessable = 'UNPROCESSABLE'
}

/** Autogenerated return type of UnlikeFeedEntry */
export type UnlikeFeedEntryPayload = {
   __typename?: 'UnlikeFeedEntryPayload',
  entry: Feed__Entry,
};

export type User = {
   __typename?: 'User',
  avatar?: Maybe<Attached>,
  email: Scalars['String'],
  id: Scalars['ID'],
  name: Scalars['String'],
};

export type UserInput = {
  email: Scalars['String'],
  name: Scalars['String'],
};

export type BuildFeedCommentMutationVariables = {
  input: Feed__CommentInput
};


export type BuildFeedCommentMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'BuildFeedCommentPayload' }
    & Pick<BuildFeedCommentPayload, 'status'>
    & { errors: Maybe<(
      { __typename?: 'Errors' }
      & Pick<Errors, 'messages'>
    )>, comment: Maybe<(
      { __typename?: 'Feed__Comment' }
      & Feed__CommentFragment
    )> }
  )> }
);

export type FeedCommentsQueryVariables = {
  id: Scalars['ID']
};


export type FeedCommentsQuery = (
  { __typename?: 'Query' }
  & { feed: (
    { __typename?: 'Feed' }
    & { entry: (
      { __typename?: 'Feed__Entry' }
      & Pick<Feed__Entry, 'id'>
      & { comments: Array<(
        { __typename?: 'Feed__Comment' }
        & Feed__CommentFragment
      )> }
    ) }
  ) }
);

export type FeedEntryQueryVariables = {
  id: Scalars['ID']
};


export type FeedEntryQuery = (
  { __typename?: 'Query' }
  & { feed: (
    { __typename?: 'Feed' }
    & { entry: (
      { __typename?: 'Feed__Entry' }
      & Feed__EntryFragment
    ) }
  ) }
);

export type LikeFeedEntryMutationVariables = {
  id: Scalars['ID']
};


export type LikeFeedEntryMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'LikeFeedEntryPayload' }
    & { entry: (
      { __typename?: 'Feed__Entry' }
      & Pick<Feed__Entry, 'id' | 'liked' | 'likes'>
    ) }
  )> }
);

export type UnlikeFeedEntryMutationVariables = {
  id: Scalars['ID']
};


export type UnlikeFeedEntryMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'UnlikeFeedEntryPayload' }
    & { entry: (
      { __typename?: 'Feed__Entry' }
      & Pick<Feed__Entry, 'id' | 'liked' | 'likes'>
    ) }
  )> }
);

export type FeedQueryVariables = {};


export type FeedQuery = (
  { __typename?: 'Query' }
  & { feed: (
    { __typename?: 'Feed' }
    & { entries: Array<(
      { __typename?: 'Feed__Entry' }
      & Feed__EntryFragment
    )> }
  ) }
);

export type LoginMutationVariables = {
  input: LoginInput
};


export type LoginMutation = (
  { __typename?: 'Mutation' }
  & { login: Maybe<(
    { __typename?: 'LoginMutationPayload' }
    & Pick<LoginMutationPayload, 'status'>
    & { session: Maybe<(
      { __typename?: 'Session' }
      & Pick<Session, 'id'>
    )>, errors: Maybe<(
      { __typename?: 'Errors' }
      & Pick<Errors, 'messages'>
    )> }
  )> }
);

export type LogoutMutationVariables = {};


export type LogoutMutation = (
  { __typename?: 'Mutation' }
  & { logout: Maybe<(
    { __typename?: 'LogoutMutationPayload' }
    & Pick<LogoutMutationPayload, 'status'>
  )> }
);

export type DestroyNotificationMutationVariables = {
  id: Scalars['ID']
};


export type DestroyNotificationMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'DestroyNotificationPayload' }
    & { notification: (
      { __typename?: 'Notification' }
      & Pick<Notification, 'id' | 'deleted'>
    ) }
  )> }
);

export type NotificationsQueryVariables = {};


export type NotificationsQuery = (
  { __typename?: 'Query' }
  & { notifications: Array<(
    { __typename?: 'Notification' }
    & NotificationFragment
  )> }
);

export type ReadNotificationMutationVariables = {
  id: Scalars['ID']
};


export type ReadNotificationMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'ReadNotificationPayload' }
    & { notification: (
      { __typename?: 'Notification' }
      & Pick<Notification, 'id' | 'read'>
    ) }
  )> }
);

export type SettingsAvatarAttachMutationVariables = {
  id: Scalars['ID']
};


export type SettingsAvatarAttachMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'AttachAvatarPayload' }
    & Pick<AttachAvatarPayload, 'status'>
  )> }
);

export type SettingsAvatarDetachMutationVariables = {};


export type SettingsAvatarDetachMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'DetachAvatarPayload' }
    & Pick<DetachAvatarPayload, 'status'>
  )> }
);

export type SettingsAvatarQueryVariables = {};


export type SettingsAvatarQuery = (
  { __typename?: 'Query' }
  & { user: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { avatar: Maybe<(
      { __typename?: 'Attached' }
      & Pick<Attached, 'id'>
    )> }
  )> }
);

export type SettingsBillingQueryVariables = {};


export type SettingsBillingQuery = (
  { __typename?: 'Query' }
  & { billing: (
    { __typename?: 'Billing' }
    & { customer: Maybe<(
      { __typename?: 'Billing__Customer' }
      & Pick<Billing__Customer, 'id' | 'currency'>
      & { sources: Array<(
        { __typename?: 'Billing__Source' }
        & Pick<Billing__Source, 'id' | 'number' | 'brand' | 'exp' | 'default'>
      )> }
    )> }
  ) }
);

export type SettingsBillingSourceBuildMutationVariables = {
  source: Scalars['String']
};


export type SettingsBillingSourceBuildMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'BuildBillingSourcePayload' }
    & Pick<BuildBillingSourcePayload, 'status'>
  )> }
);

export type SettingsBillingSourceDefaultMutationVariables = {
  id: Scalars['ID']
};


export type SettingsBillingSourceDefaultMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'DefaultBillingSourcePayload' }
    & Pick<DefaultBillingSourcePayload, 'status'>
  )> }
);

export type SettingsBillingSourceDestroyMutationVariables = {
  id: Scalars['ID']
};


export type SettingsBillingSourceDestroyMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'DestroyBillingSourcePayload' }
    & Pick<DestroyBillingSourcePayload, 'status'>
  )> }
);

export type SettingsPasswordMutationVariables = {
  input: PasswordInput
};


export type SettingsPasswordMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'ChangePasswordPayload' }
    & Pick<ChangePasswordPayload, 'status'>
    & { errors: Maybe<(
      { __typename?: 'Errors' }
      & Pick<Errors, 'messages'>
    )> }
  )> }
);

export type SettingsChangeProfileMutationVariables = {
  input: UserInput
};


export type SettingsChangeProfileMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'ChangeProfilePayload' }
    & Pick<ChangeProfilePayload, 'status'>
    & { errors: Maybe<(
      { __typename?: 'Errors' }
      & Pick<Errors, 'messages'>
    )> }
  )> }
);

export type SettingsProfileQueryVariables = {};


export type SettingsProfileQuery = (
  { __typename?: 'Query' }
  & { user: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'name' | 'email'>
  )> }
);

export type SettingsSessionsQueryVariables = {};


export type SettingsSessionsQuery = (
  { __typename?: 'Query' }
  & { sessions: Array<(
    { __typename?: 'Session' }
    & SessionFragment
  )> }
);

export type SettingsSessionRevokeMutationVariables = {
  id: Scalars['String']
};


export type SettingsSessionRevokeMutation = (
  { __typename?: 'Mutation' }
  & { result: Maybe<(
    { __typename?: 'DestroySessionPayload' }
    & { session: (
      { __typename?: 'Session' }
      & Pick<Session, 'id' | 'deleted'>
    ) }
  )> }
);

export type SignupMutationVariables = {
  input: SignupInput
};


export type SignupMutation = (
  { __typename?: 'Mutation' }
  & { signup: Maybe<(
    { __typename?: 'SignupMutationPayload' }
    & Pick<SignupMutationPayload, 'status'>
    & { session: Maybe<(
      { __typename?: 'Session' }
      & Pick<Session, 'id'>
    )>, errors: Maybe<(
      { __typename?: 'Errors' }
      & Pick<Errors, 'messages'>
    )> }
  )> }
);

export type AttachedFragment = (
  { __typename?: 'Attached' }
  & Pick<Attached, 'id' | 'filename'>
);

export type Feed__CommentFragment = (
  { __typename?: 'Feed__Comment' }
  & Pick<Feed__Comment, 'id' | 'message' | 'sent'>
  & { user: (
    { __typename?: 'User' }
    & UserFragment
  ) }
);

export type Feed__EntryFragment = (
  { __typename?: 'Feed__Entry' }
  & Pick<Feed__Entry, 'id' | 'tags' | 'liked' | 'likes'>
  & { photos: Array<(
    { __typename?: 'Attached' }
    & AttachedFragment
  )>, user: (
    { __typename?: 'User' }
    & UserFragment
  ) }
);

export type GeographyFragment = (
  { __typename?: 'Geography' }
  & Pick<Geography, 'id' | 'city' | 'region' | 'country' | 'zip' | 'latitude' | 'longitude'>
);

export type NotificationFragment = (
  { __typename?: 'Notification' }
  & Pick<Notification, 'id' | 'message' | 'deleted' | 'read' | 'sent'>
);

export type SessionFragment = (
  { __typename?: 'Session' }
  & Pick<Session, 'id' | 'ip' | 'deleted' | 'seen' | 'status'>
  & { geography: Maybe<(
    { __typename?: 'Geography' }
    & GeographyFragment
  )> }
);

export type UserFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'name'>
  & { avatar: Maybe<(
    { __typename?: 'Attached' }
    & AttachedFragment
  )> }
);

export const AttachedFragmentDoc = gql`
    fragment attached on Attached {
  id
  filename
}
    `;
export const UserFragmentDoc = gql`
    fragment user on User {
  id
  name
  avatar {
    ...attached
  }
}
    ${AttachedFragmentDoc}`;
export const Feed__CommentFragmentDoc = gql`
    fragment feed__comment on Feed__Comment {
  id
  message
  sent
  user {
    ...user
  }
}
    ${UserFragmentDoc}`;
export const Feed__EntryFragmentDoc = gql`
    fragment feed__entry on Feed__Entry {
  id
  tags
  liked
  likes
  photos {
    ...attached
  }
  user {
    ...user
  }
}
    ${AttachedFragmentDoc}
${UserFragmentDoc}`;
export const NotificationFragmentDoc = gql`
    fragment notification on Notification {
  id
  message
  deleted
  read
  sent
}
    `;
export const GeographyFragmentDoc = gql`
    fragment geography on Geography {
  id
  city
  region
  country
  zip
  latitude
  longitude
}
    `;
export const SessionFragmentDoc = gql`
    fragment session on Session {
  id
  ip
  deleted
  seen
  status
  geography {
    ...geography
  }
}
    ${GeographyFragmentDoc}`;
export const BuildFeedCommentDocument = gql`
    mutation BuildFeedComment($input: Feed__CommentInput!) {
  result: buildFeedComment(input: $input) {
    status
    errors {
      messages
    }
    comment {
      ...feed__comment
    }
  }
}
    ${Feed__CommentFragmentDoc}`;
export type BuildFeedCommentMutationFn = ApolloReactCommon.MutationFunction<BuildFeedCommentMutation, BuildFeedCommentMutationVariables>;

/**
 * __useBuildFeedCommentMutation__
 *
 * To run a mutation, you first call `useBuildFeedCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBuildFeedCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [buildFeedCommentMutation, { data, loading, error }] = useBuildFeedCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useBuildFeedCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<BuildFeedCommentMutation, BuildFeedCommentMutationVariables>) {
        return ApolloReactHooks.useMutation<BuildFeedCommentMutation, BuildFeedCommentMutationVariables>(BuildFeedCommentDocument, baseOptions);
      }
export type BuildFeedCommentMutationHookResult = ReturnType<typeof useBuildFeedCommentMutation>;
export type BuildFeedCommentMutationResult = ApolloReactCommon.MutationResult<BuildFeedCommentMutation>;
export type BuildFeedCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<BuildFeedCommentMutation, BuildFeedCommentMutationVariables>;
export const FeedCommentsDocument = gql`
    query FeedComments($id: ID!) {
  feed {
    entry(id: $id) {
      id
      comments {
        ...feed__comment
      }
    }
  }
}
    ${Feed__CommentFragmentDoc}`;

/**
 * __useFeedCommentsQuery__
 *
 * To run a query within a React component, call `useFeedCommentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFeedCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFeedCommentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFeedCommentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FeedCommentsQuery, FeedCommentsQueryVariables>) {
        return ApolloReactHooks.useQuery<FeedCommentsQuery, FeedCommentsQueryVariables>(FeedCommentsDocument, baseOptions);
      }
export function useFeedCommentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FeedCommentsQuery, FeedCommentsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FeedCommentsQuery, FeedCommentsQueryVariables>(FeedCommentsDocument, baseOptions);
        }
export type FeedCommentsQueryHookResult = ReturnType<typeof useFeedCommentsQuery>;
export type FeedCommentsLazyQueryHookResult = ReturnType<typeof useFeedCommentsLazyQuery>;
export type FeedCommentsQueryResult = ApolloReactCommon.QueryResult<FeedCommentsQuery, FeedCommentsQueryVariables>;
export const FeedEntryDocument = gql`
    query FeedEntry($id: ID!) {
  feed {
    entry(id: $id) {
      ...feed__entry
    }
  }
}
    ${Feed__EntryFragmentDoc}`;

/**
 * __useFeedEntryQuery__
 *
 * To run a query within a React component, call `useFeedEntryQuery` and pass it any options that fit your needs.
 * When your component renders, `useFeedEntryQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFeedEntryQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFeedEntryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FeedEntryQuery, FeedEntryQueryVariables>) {
        return ApolloReactHooks.useQuery<FeedEntryQuery, FeedEntryQueryVariables>(FeedEntryDocument, baseOptions);
      }
export function useFeedEntryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FeedEntryQuery, FeedEntryQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FeedEntryQuery, FeedEntryQueryVariables>(FeedEntryDocument, baseOptions);
        }
export type FeedEntryQueryHookResult = ReturnType<typeof useFeedEntryQuery>;
export type FeedEntryLazyQueryHookResult = ReturnType<typeof useFeedEntryLazyQuery>;
export type FeedEntryQueryResult = ApolloReactCommon.QueryResult<FeedEntryQuery, FeedEntryQueryVariables>;
export const LikeFeedEntryDocument = gql`
    mutation LikeFeedEntry($id: ID!) {
  result: likeFeedEntry(id: $id) {
    entry {
      id
      liked
      likes
    }
  }
}
    `;
export type LikeFeedEntryMutationFn = ApolloReactCommon.MutationFunction<LikeFeedEntryMutation, LikeFeedEntryMutationVariables>;

/**
 * __useLikeFeedEntryMutation__
 *
 * To run a mutation, you first call `useLikeFeedEntryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLikeFeedEntryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [likeFeedEntryMutation, { data, loading, error }] = useLikeFeedEntryMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useLikeFeedEntryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LikeFeedEntryMutation, LikeFeedEntryMutationVariables>) {
        return ApolloReactHooks.useMutation<LikeFeedEntryMutation, LikeFeedEntryMutationVariables>(LikeFeedEntryDocument, baseOptions);
      }
export type LikeFeedEntryMutationHookResult = ReturnType<typeof useLikeFeedEntryMutation>;
export type LikeFeedEntryMutationResult = ApolloReactCommon.MutationResult<LikeFeedEntryMutation>;
export type LikeFeedEntryMutationOptions = ApolloReactCommon.BaseMutationOptions<LikeFeedEntryMutation, LikeFeedEntryMutationVariables>;
export const UnlikeFeedEntryDocument = gql`
    mutation UnlikeFeedEntry($id: ID!) {
  result: unlikeFeedEntry(id: $id) {
    entry {
      id
      liked
      likes
    }
  }
}
    `;
export type UnlikeFeedEntryMutationFn = ApolloReactCommon.MutationFunction<UnlikeFeedEntryMutation, UnlikeFeedEntryMutationVariables>;

/**
 * __useUnlikeFeedEntryMutation__
 *
 * To run a mutation, you first call `useUnlikeFeedEntryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnlikeFeedEntryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unlikeFeedEntryMutation, { data, loading, error }] = useUnlikeFeedEntryMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useUnlikeFeedEntryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UnlikeFeedEntryMutation, UnlikeFeedEntryMutationVariables>) {
        return ApolloReactHooks.useMutation<UnlikeFeedEntryMutation, UnlikeFeedEntryMutationVariables>(UnlikeFeedEntryDocument, baseOptions);
      }
export type UnlikeFeedEntryMutationHookResult = ReturnType<typeof useUnlikeFeedEntryMutation>;
export type UnlikeFeedEntryMutationResult = ApolloReactCommon.MutationResult<UnlikeFeedEntryMutation>;
export type UnlikeFeedEntryMutationOptions = ApolloReactCommon.BaseMutationOptions<UnlikeFeedEntryMutation, UnlikeFeedEntryMutationVariables>;
export const FeedDocument = gql`
    query Feed {
  feed {
    entries {
      ...feed__entry
    }
  }
}
    ${Feed__EntryFragmentDoc}`;

/**
 * __useFeedQuery__
 *
 * To run a query within a React component, call `useFeedQuery` and pass it any options that fit your needs.
 * When your component renders, `useFeedQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFeedQuery({
 *   variables: {
 *   },
 * });
 */
export function useFeedQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FeedQuery, FeedQueryVariables>) {
        return ApolloReactHooks.useQuery<FeedQuery, FeedQueryVariables>(FeedDocument, baseOptions);
      }
export function useFeedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FeedQuery, FeedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FeedQuery, FeedQueryVariables>(FeedDocument, baseOptions);
        }
export type FeedQueryHookResult = ReturnType<typeof useFeedQuery>;
export type FeedLazyQueryHookResult = ReturnType<typeof useFeedLazyQuery>;
export type FeedQueryResult = ApolloReactCommon.QueryResult<FeedQuery, FeedQueryVariables>;
export const LoginDocument = gql`
    mutation Login($input: LoginInput!) {
  login(input: $input) {
    status
    session {
      id
    }
    errors {
      messages
    }
  }
}
    `;
export type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;
export type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const LogoutDocument = gql`
    mutation Logout {
  logout {
    status
  }
}
    `;
export type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);
      }
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;
export type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export const DestroyNotificationDocument = gql`
    mutation DestroyNotification($id: ID!) {
  result: destroyNotification(id: $id) {
    notification {
      id
      deleted
    }
  }
}
    `;
export type DestroyNotificationMutationFn = ApolloReactCommon.MutationFunction<DestroyNotificationMutation, DestroyNotificationMutationVariables>;

/**
 * __useDestroyNotificationMutation__
 *
 * To run a mutation, you first call `useDestroyNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDestroyNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [destroyNotificationMutation, { data, loading, error }] = useDestroyNotificationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDestroyNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DestroyNotificationMutation, DestroyNotificationMutationVariables>) {
        return ApolloReactHooks.useMutation<DestroyNotificationMutation, DestroyNotificationMutationVariables>(DestroyNotificationDocument, baseOptions);
      }
export type DestroyNotificationMutationHookResult = ReturnType<typeof useDestroyNotificationMutation>;
export type DestroyNotificationMutationResult = ApolloReactCommon.MutationResult<DestroyNotificationMutation>;
export type DestroyNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<DestroyNotificationMutation, DestroyNotificationMutationVariables>;
export const NotificationsDocument = gql`
    query Notifications {
  notifications {
    ...notification
  }
}
    ${NotificationFragmentDoc}`;

/**
 * __useNotificationsQuery__
 *
 * To run a query within a React component, call `useNotificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useNotificationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useNotificationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<NotificationsQuery, NotificationsQueryVariables>) {
        return ApolloReactHooks.useQuery<NotificationsQuery, NotificationsQueryVariables>(NotificationsDocument, baseOptions);
      }
export function useNotificationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<NotificationsQuery, NotificationsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<NotificationsQuery, NotificationsQueryVariables>(NotificationsDocument, baseOptions);
        }
export type NotificationsQueryHookResult = ReturnType<typeof useNotificationsQuery>;
export type NotificationsLazyQueryHookResult = ReturnType<typeof useNotificationsLazyQuery>;
export type NotificationsQueryResult = ApolloReactCommon.QueryResult<NotificationsQuery, NotificationsQueryVariables>;
export const ReadNotificationDocument = gql`
    mutation ReadNotification($id: ID!) {
  result: readNotification(id: $id) {
    notification {
      id
      read
    }
  }
}
    `;
export type ReadNotificationMutationFn = ApolloReactCommon.MutationFunction<ReadNotificationMutation, ReadNotificationMutationVariables>;

/**
 * __useReadNotificationMutation__
 *
 * To run a mutation, you first call `useReadNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReadNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [readNotificationMutation, { data, loading, error }] = useReadNotificationMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useReadNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReadNotificationMutation, ReadNotificationMutationVariables>) {
        return ApolloReactHooks.useMutation<ReadNotificationMutation, ReadNotificationMutationVariables>(ReadNotificationDocument, baseOptions);
      }
export type ReadNotificationMutationHookResult = ReturnType<typeof useReadNotificationMutation>;
export type ReadNotificationMutationResult = ApolloReactCommon.MutationResult<ReadNotificationMutation>;
export type ReadNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<ReadNotificationMutation, ReadNotificationMutationVariables>;
export const SettingsAvatarAttachDocument = gql`
    mutation SettingsAvatarAttach($id: ID!) {
  result: attachAvatar(id: $id) {
    status
  }
}
    `;
export type SettingsAvatarAttachMutationFn = ApolloReactCommon.MutationFunction<SettingsAvatarAttachMutation, SettingsAvatarAttachMutationVariables>;

/**
 * __useSettingsAvatarAttachMutation__
 *
 * To run a mutation, you first call `useSettingsAvatarAttachMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSettingsAvatarAttachMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [settingsAvatarAttachMutation, { data, loading, error }] = useSettingsAvatarAttachMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSettingsAvatarAttachMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SettingsAvatarAttachMutation, SettingsAvatarAttachMutationVariables>) {
        return ApolloReactHooks.useMutation<SettingsAvatarAttachMutation, SettingsAvatarAttachMutationVariables>(SettingsAvatarAttachDocument, baseOptions);
      }
export type SettingsAvatarAttachMutationHookResult = ReturnType<typeof useSettingsAvatarAttachMutation>;
export type SettingsAvatarAttachMutationResult = ApolloReactCommon.MutationResult<SettingsAvatarAttachMutation>;
export type SettingsAvatarAttachMutationOptions = ApolloReactCommon.BaseMutationOptions<SettingsAvatarAttachMutation, SettingsAvatarAttachMutationVariables>;
export const SettingsAvatarDetachDocument = gql`
    mutation SettingsAvatarDetach {
  result: detachAvatar {
    status
  }
}
    `;
export type SettingsAvatarDetachMutationFn = ApolloReactCommon.MutationFunction<SettingsAvatarDetachMutation, SettingsAvatarDetachMutationVariables>;

/**
 * __useSettingsAvatarDetachMutation__
 *
 * To run a mutation, you first call `useSettingsAvatarDetachMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSettingsAvatarDetachMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [settingsAvatarDetachMutation, { data, loading, error }] = useSettingsAvatarDetachMutation({
 *   variables: {
 *   },
 * });
 */
export function useSettingsAvatarDetachMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SettingsAvatarDetachMutation, SettingsAvatarDetachMutationVariables>) {
        return ApolloReactHooks.useMutation<SettingsAvatarDetachMutation, SettingsAvatarDetachMutationVariables>(SettingsAvatarDetachDocument, baseOptions);
      }
export type SettingsAvatarDetachMutationHookResult = ReturnType<typeof useSettingsAvatarDetachMutation>;
export type SettingsAvatarDetachMutationResult = ApolloReactCommon.MutationResult<SettingsAvatarDetachMutation>;
export type SettingsAvatarDetachMutationOptions = ApolloReactCommon.BaseMutationOptions<SettingsAvatarDetachMutation, SettingsAvatarDetachMutationVariables>;
export const SettingsAvatarDocument = gql`
    query SettingsAvatar {
  user {
    id
    avatar {
      id
    }
  }
}
    `;

/**
 * __useSettingsAvatarQuery__
 *
 * To run a query within a React component, call `useSettingsAvatarQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsAvatarQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsAvatarQuery({
 *   variables: {
 *   },
 * });
 */
export function useSettingsAvatarQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SettingsAvatarQuery, SettingsAvatarQueryVariables>) {
        return ApolloReactHooks.useQuery<SettingsAvatarQuery, SettingsAvatarQueryVariables>(SettingsAvatarDocument, baseOptions);
      }
export function useSettingsAvatarLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SettingsAvatarQuery, SettingsAvatarQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SettingsAvatarQuery, SettingsAvatarQueryVariables>(SettingsAvatarDocument, baseOptions);
        }
export type SettingsAvatarQueryHookResult = ReturnType<typeof useSettingsAvatarQuery>;
export type SettingsAvatarLazyQueryHookResult = ReturnType<typeof useSettingsAvatarLazyQuery>;
export type SettingsAvatarQueryResult = ApolloReactCommon.QueryResult<SettingsAvatarQuery, SettingsAvatarQueryVariables>;
export const SettingsBillingDocument = gql`
    query SettingsBilling {
  billing {
    customer {
      id
      currency
      sources {
        id
        number
        brand
        exp
        default
      }
    }
  }
}
    `;

/**
 * __useSettingsBillingQuery__
 *
 * To run a query within a React component, call `useSettingsBillingQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsBillingQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsBillingQuery({
 *   variables: {
 *   },
 * });
 */
export function useSettingsBillingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SettingsBillingQuery, SettingsBillingQueryVariables>) {
        return ApolloReactHooks.useQuery<SettingsBillingQuery, SettingsBillingQueryVariables>(SettingsBillingDocument, baseOptions);
      }
export function useSettingsBillingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SettingsBillingQuery, SettingsBillingQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SettingsBillingQuery, SettingsBillingQueryVariables>(SettingsBillingDocument, baseOptions);
        }
export type SettingsBillingQueryHookResult = ReturnType<typeof useSettingsBillingQuery>;
export type SettingsBillingLazyQueryHookResult = ReturnType<typeof useSettingsBillingLazyQuery>;
export type SettingsBillingQueryResult = ApolloReactCommon.QueryResult<SettingsBillingQuery, SettingsBillingQueryVariables>;
export const SettingsBillingSourceBuildDocument = gql`
    mutation SettingsBillingSourceBuild($source: String!) {
  result: buildBillingSource(source: $source) {
    status
  }
}
    `;
export type SettingsBillingSourceBuildMutationFn = ApolloReactCommon.MutationFunction<SettingsBillingSourceBuildMutation, SettingsBillingSourceBuildMutationVariables>;

/**
 * __useSettingsBillingSourceBuildMutation__
 *
 * To run a mutation, you first call `useSettingsBillingSourceBuildMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSettingsBillingSourceBuildMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [settingsBillingSourceBuildMutation, { data, loading, error }] = useSettingsBillingSourceBuildMutation({
 *   variables: {
 *      source: // value for 'source'
 *   },
 * });
 */
export function useSettingsBillingSourceBuildMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SettingsBillingSourceBuildMutation, SettingsBillingSourceBuildMutationVariables>) {
        return ApolloReactHooks.useMutation<SettingsBillingSourceBuildMutation, SettingsBillingSourceBuildMutationVariables>(SettingsBillingSourceBuildDocument, baseOptions);
      }
export type SettingsBillingSourceBuildMutationHookResult = ReturnType<typeof useSettingsBillingSourceBuildMutation>;
export type SettingsBillingSourceBuildMutationResult = ApolloReactCommon.MutationResult<SettingsBillingSourceBuildMutation>;
export type SettingsBillingSourceBuildMutationOptions = ApolloReactCommon.BaseMutationOptions<SettingsBillingSourceBuildMutation, SettingsBillingSourceBuildMutationVariables>;
export const SettingsBillingSourceDefaultDocument = gql`
    mutation SettingsBillingSourceDefault($id: ID!) {
  result: defaultBillingSource(id: $id) {
    status
  }
}
    `;
export type SettingsBillingSourceDefaultMutationFn = ApolloReactCommon.MutationFunction<SettingsBillingSourceDefaultMutation, SettingsBillingSourceDefaultMutationVariables>;

/**
 * __useSettingsBillingSourceDefaultMutation__
 *
 * To run a mutation, you first call `useSettingsBillingSourceDefaultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSettingsBillingSourceDefaultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [settingsBillingSourceDefaultMutation, { data, loading, error }] = useSettingsBillingSourceDefaultMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSettingsBillingSourceDefaultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SettingsBillingSourceDefaultMutation, SettingsBillingSourceDefaultMutationVariables>) {
        return ApolloReactHooks.useMutation<SettingsBillingSourceDefaultMutation, SettingsBillingSourceDefaultMutationVariables>(SettingsBillingSourceDefaultDocument, baseOptions);
      }
export type SettingsBillingSourceDefaultMutationHookResult = ReturnType<typeof useSettingsBillingSourceDefaultMutation>;
export type SettingsBillingSourceDefaultMutationResult = ApolloReactCommon.MutationResult<SettingsBillingSourceDefaultMutation>;
export type SettingsBillingSourceDefaultMutationOptions = ApolloReactCommon.BaseMutationOptions<SettingsBillingSourceDefaultMutation, SettingsBillingSourceDefaultMutationVariables>;
export const SettingsBillingSourceDestroyDocument = gql`
    mutation SettingsBillingSourceDestroy($id: ID!) {
  result: destroyBillingSource(id: $id) {
    status
  }
}
    `;
export type SettingsBillingSourceDestroyMutationFn = ApolloReactCommon.MutationFunction<SettingsBillingSourceDestroyMutation, SettingsBillingSourceDestroyMutationVariables>;

/**
 * __useSettingsBillingSourceDestroyMutation__
 *
 * To run a mutation, you first call `useSettingsBillingSourceDestroyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSettingsBillingSourceDestroyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [settingsBillingSourceDestroyMutation, { data, loading, error }] = useSettingsBillingSourceDestroyMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSettingsBillingSourceDestroyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SettingsBillingSourceDestroyMutation, SettingsBillingSourceDestroyMutationVariables>) {
        return ApolloReactHooks.useMutation<SettingsBillingSourceDestroyMutation, SettingsBillingSourceDestroyMutationVariables>(SettingsBillingSourceDestroyDocument, baseOptions);
      }
export type SettingsBillingSourceDestroyMutationHookResult = ReturnType<typeof useSettingsBillingSourceDestroyMutation>;
export type SettingsBillingSourceDestroyMutationResult = ApolloReactCommon.MutationResult<SettingsBillingSourceDestroyMutation>;
export type SettingsBillingSourceDestroyMutationOptions = ApolloReactCommon.BaseMutationOptions<SettingsBillingSourceDestroyMutation, SettingsBillingSourceDestroyMutationVariables>;
export const SettingsPasswordDocument = gql`
    mutation SettingsPassword($input: PasswordInput!) {
  result: changePassword(input: $input) {
    status
    errors {
      messages
    }
  }
}
    `;
export type SettingsPasswordMutationFn = ApolloReactCommon.MutationFunction<SettingsPasswordMutation, SettingsPasswordMutationVariables>;

/**
 * __useSettingsPasswordMutation__
 *
 * To run a mutation, you first call `useSettingsPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSettingsPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [settingsPasswordMutation, { data, loading, error }] = useSettingsPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSettingsPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SettingsPasswordMutation, SettingsPasswordMutationVariables>) {
        return ApolloReactHooks.useMutation<SettingsPasswordMutation, SettingsPasswordMutationVariables>(SettingsPasswordDocument, baseOptions);
      }
export type SettingsPasswordMutationHookResult = ReturnType<typeof useSettingsPasswordMutation>;
export type SettingsPasswordMutationResult = ApolloReactCommon.MutationResult<SettingsPasswordMutation>;
export type SettingsPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<SettingsPasswordMutation, SettingsPasswordMutationVariables>;
export const SettingsChangeProfileDocument = gql`
    mutation SettingsChangeProfile($input: UserInput!) {
  result: changeProfile(input: $input) {
    status
    errors {
      messages
    }
  }
}
    `;
export type SettingsChangeProfileMutationFn = ApolloReactCommon.MutationFunction<SettingsChangeProfileMutation, SettingsChangeProfileMutationVariables>;

/**
 * __useSettingsChangeProfileMutation__
 *
 * To run a mutation, you first call `useSettingsChangeProfileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSettingsChangeProfileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [settingsChangeProfileMutation, { data, loading, error }] = useSettingsChangeProfileMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSettingsChangeProfileMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SettingsChangeProfileMutation, SettingsChangeProfileMutationVariables>) {
        return ApolloReactHooks.useMutation<SettingsChangeProfileMutation, SettingsChangeProfileMutationVariables>(SettingsChangeProfileDocument, baseOptions);
      }
export type SettingsChangeProfileMutationHookResult = ReturnType<typeof useSettingsChangeProfileMutation>;
export type SettingsChangeProfileMutationResult = ApolloReactCommon.MutationResult<SettingsChangeProfileMutation>;
export type SettingsChangeProfileMutationOptions = ApolloReactCommon.BaseMutationOptions<SettingsChangeProfileMutation, SettingsChangeProfileMutationVariables>;
export const SettingsProfileDocument = gql`
    query SettingsProfile {
  user {
    id
    name
    email
  }
}
    `;

/**
 * __useSettingsProfileQuery__
 *
 * To run a query within a React component, call `useSettingsProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsProfileQuery({
 *   variables: {
 *   },
 * });
 */
export function useSettingsProfileQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SettingsProfileQuery, SettingsProfileQueryVariables>) {
        return ApolloReactHooks.useQuery<SettingsProfileQuery, SettingsProfileQueryVariables>(SettingsProfileDocument, baseOptions);
      }
export function useSettingsProfileLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SettingsProfileQuery, SettingsProfileQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SettingsProfileQuery, SettingsProfileQueryVariables>(SettingsProfileDocument, baseOptions);
        }
export type SettingsProfileQueryHookResult = ReturnType<typeof useSettingsProfileQuery>;
export type SettingsProfileLazyQueryHookResult = ReturnType<typeof useSettingsProfileLazyQuery>;
export type SettingsProfileQueryResult = ApolloReactCommon.QueryResult<SettingsProfileQuery, SettingsProfileQueryVariables>;
export const SettingsSessionsDocument = gql`
    query SettingsSessions {
  sessions {
    ...session
  }
}
    ${SessionFragmentDoc}`;

/**
 * __useSettingsSessionsQuery__
 *
 * To run a query within a React component, call `useSettingsSessionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsSessionsQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSettingsSessionsQuery({
 *   variables: {
 *   },
 * });
 */
export function useSettingsSessionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SettingsSessionsQuery, SettingsSessionsQueryVariables>) {
        return ApolloReactHooks.useQuery<SettingsSessionsQuery, SettingsSessionsQueryVariables>(SettingsSessionsDocument, baseOptions);
      }
export function useSettingsSessionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SettingsSessionsQuery, SettingsSessionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SettingsSessionsQuery, SettingsSessionsQueryVariables>(SettingsSessionsDocument, baseOptions);
        }
export type SettingsSessionsQueryHookResult = ReturnType<typeof useSettingsSessionsQuery>;
export type SettingsSessionsLazyQueryHookResult = ReturnType<typeof useSettingsSessionsLazyQuery>;
export type SettingsSessionsQueryResult = ApolloReactCommon.QueryResult<SettingsSessionsQuery, SettingsSessionsQueryVariables>;
export const SettingsSessionRevokeDocument = gql`
    mutation SettingsSessionRevoke($id: String!) {
  result: destroySession(id: $id) {
    session {
      id
      deleted
    }
  }
}
    `;
export type SettingsSessionRevokeMutationFn = ApolloReactCommon.MutationFunction<SettingsSessionRevokeMutation, SettingsSessionRevokeMutationVariables>;

/**
 * __useSettingsSessionRevokeMutation__
 *
 * To run a mutation, you first call `useSettingsSessionRevokeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSettingsSessionRevokeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [settingsSessionRevokeMutation, { data, loading, error }] = useSettingsSessionRevokeMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useSettingsSessionRevokeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SettingsSessionRevokeMutation, SettingsSessionRevokeMutationVariables>) {
        return ApolloReactHooks.useMutation<SettingsSessionRevokeMutation, SettingsSessionRevokeMutationVariables>(SettingsSessionRevokeDocument, baseOptions);
      }
export type SettingsSessionRevokeMutationHookResult = ReturnType<typeof useSettingsSessionRevokeMutation>;
export type SettingsSessionRevokeMutationResult = ApolloReactCommon.MutationResult<SettingsSessionRevokeMutation>;
export type SettingsSessionRevokeMutationOptions = ApolloReactCommon.BaseMutationOptions<SettingsSessionRevokeMutation, SettingsSessionRevokeMutationVariables>;
export const SignupDocument = gql`
    mutation Signup($input: SignupInput!) {
  signup(input: $input) {
    status
    session {
      id
    }
    errors {
      messages
    }
  }
}
    `;
export type SignupMutationFn = ApolloReactCommon.MutationFunction<SignupMutation, SignupMutationVariables>;

/**
 * __useSignupMutation__
 *
 * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignupMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signupMutation, { data, loading, error }] = useSignupMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSignupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignupMutation, SignupMutationVariables>) {
        return ApolloReactHooks.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, baseOptions);
      }
export type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;
export type SignupMutationResult = ApolloReactCommon.MutationResult<SignupMutation>;
export type SignupMutationOptions = ApolloReactCommon.BaseMutationOptions<SignupMutation, SignupMutationVariables>;